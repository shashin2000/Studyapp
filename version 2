import tkinter as tk
from tkinter import ttk, filedialog, messagebox, Toplevel, Listbox, simpledialog
import json
import os
import webbrowser
import uuid

# Use a new data file for the new data structure
DATA_FILE = 'class_data_v3.json'

class AdithaAlamaApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("ADITHAALAMA CLASS HANDLE v4.0")
        self.geometry("1200x750")

        self.data = self.load_data()
        self.setup_styles()
        self.create_widgets()
        self.create_context_menu()
        self.populate_treeview()
        self.update_summary()
        self.on_selection_change()

    def setup_styles(self):
        style = ttk.Style(self)
        style.theme_use("clam")
        style.configure("Treeview", rowheight=28, font=('Segoe UI', 10))
        style.configure("Treeview.Heading", font=('Segoe UI', 11, 'bold'))
        style.configure("TButton", font=('Segoe UI', 10), padding=5)
        style.configure("Support.TButton", foreground="green")
        style.configure("TLabel", font=('Segoe UI', 10))
        style.configure("Title.TLabel", font=('Segoe UI', 16, 'bold'), foreground='#00529B')
        style.configure("Summary.TLabel", font=('Segoe UI', 11, 'bold'), foreground='#333')
        style.map('Treeview', background=[('selected', '#0078D7')])

    def load_data(self):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            # Default structure with new list-based fields
            return {"categories": ["Physics", "Chemistry"], "entries": []}

    def save_data(self):
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, indent=4)
        self.update_combobox_values()

    def open_ad_link(self):
        """Opens the Adsterra direct link in a new browser tab."""
        ad_url = "https://offspringthisscarcely.com/kq9bf4d5zf?key=4a1042db3eb0659eb0f44c6f037e80e4"
        try:
            webbrowser.open_new_tab(ad_url)
        except Exception as e:
            messagebox.showerror("Error", f"Could not open the link: {e}")

    def create_widgets(self):
        top_frame = ttk.Frame(self, padding="10")
        top_frame.pack(fill=tk.X, side=tk.TOP)
        
        ttk.Label(top_frame, text="ADITHAALAMA CLASS HANDLE", style="Title.TLabel").pack(side=tk.LEFT, padx=10)
        
        # Action buttons on the right
        ttk.Button(top_frame, text="Add New Entry", command=self.open_add_edit_window).pack(side=tk.RIGHT, padx=5)
        ttk.Button(top_frame, text="Manage Categories", command=self.open_category_manager).pack(side=tk.RIGHT, padx=5)
        ttk.Button(top_frame, text="Support Developer", style="Support.TButton", command=self.open_ad_link).pack(side=tk.RIGHT, padx=5)

        filter_frame = ttk.Frame(self, padding=(10,0,10,10))
        filter_frame.pack(fill=tk.X, side=tk.TOP)
        ttk.Label(filter_frame, text="Filter by Class:").pack(side=tk.LEFT)
        self.category_var = tk.StringVar()
        self.category_combo = ttk.Combobox(filter_frame, textvariable=self.category_var, state="readonly", width=30)
        self.update_combobox_values()
        self.category_combo.set("All Classes")
        self.category_combo.pack(side=tk.LEFT, padx=5)
        self.category_combo.bind("<<ComboboxSelected>>", lambda e: self.populate_treeview())
        
        middle_frame = ttk.Frame(self, padding="10")
        middle_frame.pack(fill=tk.BOTH, expand=True)

        cols = ('Viewed', 'Description', 'PDFs', 'Videos', 'Notes')
        self.tree = ttk.Treeview(middle_frame, columns=cols, show='headings', selectmode="browse")
        
        self.tree.heading('Viewed', text='Viewed')
        self.tree.heading('Description', text='Description')
        self.tree.heading('PDFs', text='PDFs')
        self.tree.heading('Videos', text='Videos')
        self.tree.heading('Notes', text='Notes')
        
        self.tree.column('Viewed', width=80, anchor=tk.CENTER, stretch=tk.NO)
        self.tree.column('Description', width=300)
        self.tree.column('PDFs', width=80, anchor=tk.CENTER, stretch=tk.NO)
        self.tree.column('Videos', width=80, anchor=tk.CENTER, stretch=tk.NO)
        self.tree.column('Notes', width=400)
        
        self.tree.bind("<Button-1>", self.on_tree_cell_click)
        self.tree.bind("<Button-3>", self.show_context_menu)
        self.tree.bind("<<TreeviewSelect>>", self.on_selection_change)

        scrollbar = ttk.Scrollbar(middle_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        action_frame = ttk.Frame(self, padding=(10, 5, 10, 5))
        action_frame.pack(fill=tk.X, side=tk.BOTTOM)
        
        self.pdf_button = ttk.Button(action_frame, text="Open Selected PDF(s)", command=lambda: self.show_files_to_open('pdf'))
        self.pdf_button.pack(side=tk.LEFT, padx=5)
        
        self.video_button = ttk.Button(action_frame, text="Open Selected Video(s)", command=lambda: self.show_files_to_open('video'))
        self.video_button.pack(side=tk.LEFT, padx=5)

        self.summary_label = ttk.Label(action_frame, text="", style="Summary.TLabel")
        self.summary_label.pack(side=tk.RIGHT, padx=10)
        
    def create_context_menu(self):
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label="Edit Entry", command=self.edit_selected_entry)
        self.context_menu.add_command(label="Delete Entry", command=self.delete_selected_entry)

    def on_tree_cell_click(self, event):
        region = self.tree.identify_region(event.x, event.y)
        if region != "cell": return
        item_id = self.tree.identify_row(event.y)
        column_id = self.tree.identify_column(event.x)
        if not item_id: return
        self.tree.selection_set(item_id)
        if column_id == '#1': self.toggle_status(item_id)

    def on_selection_change(self, event=None):
        item_id = self.get_selected_item_id()
        if not item_id:
            self.pdf_button.config(state='disabled')
            self.video_button.config(state='disabled')
            return
        entry = next((e for e in self.data['entries'] if e['id'] == item_id), None)
        if not entry: return
        self.pdf_button.config(state='normal' if entry.get('pdf_paths') else 'disabled')
        self.video_button.config(state='normal' if entry.get('video_links') else 'disabled')

    def show_context_menu(self, event):
        item_id = self.tree.identify_row(event.y)
        if item_id:
            self.tree.selection_set(item_id)
            self.context_menu.post(event.x_root, event.y_root)

    def populate_treeview(self):
        for item in self.tree.get_children(): self.tree.delete(item)
        category = self.category_var.get()
        filtered_entries = [e for e in self.data['entries'] if category == "All Classes" or e.get('category') == category]
        filtered_entries.sort(key=lambda x: x['description'])
        for entry in filtered_entries:
            status_text = "☑" if entry.get('completed') else "☐"
            pdf_count = len(entry.get('pdf_paths', []))
            video_count = len(entry.get('video_links', []))
            self.tree.insert('', tk.END, iid=entry['id'],
                             values=(status_text, entry['description'], f"PDFs: {pdf_count}", f"Videos: {video_count}", entry.get('notes', '')))
        self.update_summary()
        self.on_selection_change()

    def update_summary(self):
        category = self.category_var.get()
        entries = [e for e in self.data['entries'] if category == "All Classes" or e.get('category') == category]
        total = len(entries)
        completed = sum(1 for e in entries if e.get('completed'))
        self.summary_label.config(text=f"Total: {total} | ☑ Viewed: {completed}")

    def update_combobox_values(self):
        self.category_combo['values'] = ["All Classes"] + sorted(self.data['categories'])

    def get_selected_item_id(self):
        return self.tree.selection()[0] if self.tree.selection() else None

    def edit_selected_entry(self):
        item_id = self.get_selected_item_id()
        if item_id: self.open_add_edit_window(item_id)

    def delete_selected_entry(self):
        item_id = self.get_selected_item_id()
        if not item_id: return
        if messagebox.askyesno("Confirm Delete", "Are you sure you want to delete the selected entry?"):
            self.data['entries'] = [e for e in self.data['entries'] if e['id'] != item_id]
            self.save_data()
            self.populate_treeview()

    def toggle_status(self, item_id):
        if not item_id: return
        for entry in self.data['entries']:
            if entry['id'] == item_id:
                entry['completed'] = not entry.get('completed', False)
                break
        self.save_data()
        self.populate_treeview()

    def show_files_to_open(self, file_type):
        item_id = self.get_selected_item_id()
        if not item_id: return
        entry = next((e for e in self.data['entries'] if e['id'] == item_id), None)
        if not entry: return
        
        items_list = entry.get('pdf_paths' if file_type == 'pdf' else 'video_links', [])
        if not items_list:
            messagebox.showinfo("No Files", f"No {file_type.upper()}s found for this entry.")
            return

        if len(items_list) == 1:
            self.open_link_or_file(file_type, items_list[0])
        else:
            FileSelectionWindow(self, f"Select a {file_type.upper()}", items_list, file_type)

    def open_link_or_file(self, file_type, path):
        try:
            if file_type == 'pdf':
                if os.path.exists(path):
                    os.startfile(path) if os.name == 'nt' else webbrowser.open(f'file://{os.path.realpath(path)}')
                else:
                    messagebox.showwarning("Not Found", "The PDF file was not found.")
            elif file_type == 'video':
                if path.startswith(('http://', 'https://')):
                    webbrowser.open_new_tab(path)
                else:
                    messagebox.showwarning("Invalid Link", "The video link is not a valid URL.")
        except Exception as e:
            messagebox.showerror("Error", f"Could not open the item: {e}")

    def open_add_edit_window(self, item_id=None):
        AddEditWindow(self, self.data, self.save_data, self.populate_treeview, item_id)

    def open_category_manager(self):
        CategoryManager(self, self.data, self.save_data)

class AddEditWindow(Toplevel):
    def __init__(self, parent, data, save_callback, refresh_callback, item_id=None):
        super().__init__(parent)
        self.transient(parent); self.grab_set()
        self.data = data; self.save_callback = save_callback
        self.refresh_callback = refresh_callback; self.item_id = item_id
        self.title("Edit Entry" if item_id else "Add New Entry")
        self.entry_data = next((e for e in self.data['entries'] if e['id'] == self.item_id), {}) if self.item_id else {}
        self.create_widgets()

    def create_widgets(self):
        main_frame = ttk.Frame(self, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # Basic Info
        ttk.Label(main_frame, text="Category:").grid(row=0, column=0, sticky="w", pady=2)
        self.category_var = tk.StringVar(value=self.entry_data.get('category'))
        ttk.Combobox(main_frame, textvariable=self.category_var, values=sorted(self.data['categories']), state="readonly").grid(row=0, column=1, columnspan=3, sticky="ew", pady=2)
        ttk.Label(main_frame, text="Description:").grid(row=1, column=0, sticky="w", pady=2)
        self.desc_var = tk.StringVar(value=self.entry_data.get('description', ''))
        ttk.Entry(main_frame, textvariable=self.desc_var).grid(row=1, column=1, columnspan=3, sticky="ew", pady=2)

        # PDF Management
        pdf_frame = ttk.LabelFrame(main_frame, text="PDF Files", padding=10)
        pdf_frame.grid(row=2, column=0, columnspan=4, sticky="ew", pady=10)
        self.pdf_listbox = Listbox(pdf_frame, height=4)
        self.pdf_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        for pdf in self.entry_data.get('pdf_paths', []): self.pdf_listbox.insert(tk.END, pdf)
        pdf_btn_frame = ttk.Frame(pdf_frame)
        ttk.Button(pdf_btn_frame, text="Add PDF", command=self.add_pdf).pack(fill=tk.X, pady=2)
        ttk.Button(pdf_btn_frame, text="Remove", command=lambda: self.remove_selected(self.pdf_listbox)).pack(fill=tk.X, pady=2)
        pdf_btn_frame.pack(side=tk.LEFT, padx=(10,0))

        # Video Management
        video_frame = ttk.LabelFrame(main_frame, text="Video Links", padding=10)
        video_frame.grid(row=3, column=0, columnspan=4, sticky="ew", pady=10)
        self.video_listbox = Listbox(video_frame, height=4)
        self.video_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        for video in self.entry_data.get('video_links', []): self.video_listbox.insert(tk.END, video)
        video_btn_frame = ttk.Frame(video_frame)
        ttk.Button(video_btn_frame, text="Add Video", command=self.add_video).pack(fill=tk.X, pady=2)
        ttk.Button(video_btn_frame, text="Remove", command=lambda: self.remove_selected(self.video_listbox)).pack(fill=tk.X, pady=2)
        video_btn_frame.pack(side=tk.LEFT, padx=(10,0))

        # Notes
        ttk.Label(main_frame, text="Special Note:").grid(row=4, column=0, sticky="nw", pady=2)
        self.notes_text = tk.Text(main_frame, height=4, font=('Segoe UI', 10))
        self.notes_text.insert(tk.END, self.entry_data.get('notes', ''))
        self.notes_text.grid(row=4, column=1, columnspan=3, sticky="ew", pady=2)

        ttk.Button(main_frame, text="Save Entry", command=self.save_entry).grid(row=5, column=3, sticky="e", pady=(20, 0))

    def add_pdf(self):
        filepath = filedialog.askopenfilename(title="Select PDF", filetypes=(("PDF Files", "*.pdf"),), parent=self)
        if filepath: self.pdf_listbox.insert(tk.END, filepath)

    def add_video(self):
        link = simpledialog.askstring("Add Video Link", "Enter the full video URL:", parent=self)
        if link and link.startswith('http'): self.video_listbox.insert(tk.END, link)
        elif link: messagebox.showwarning("Invalid URL", "Please enter a valid URL starting with http or https.", parent=self)

    def remove_selected(self, listbox):
        selection = listbox.curselection()
        if selection: listbox.delete(selection[0])

    def save_entry(self):
        category = self.category_var.get(); description = self.desc_var.get().strip()
        if not category or not description:
            messagebox.showerror("Validation Error", "Category and Description are required.", parent=self)
            return
        updated_data = {
            "category": category, "description": description,
            "pdf_paths": list(self.pdf_listbox.get(0, tk.END)),
            "video_links": list(self.video_listbox.get(0, tk.END)),
            "notes": self.notes_text.get("1.0", tk.END).strip()
        }
        if self.item_id:
            for entry in self.data['entries']:
                if entry['id'] == self.item_id: entry.update(updated_data)
        else:
            updated_data['id'] = str(uuid.uuid4()); updated_data['completed'] = False
            self.data['entries'].append(updated_data)
        self.save_callback(); self.refresh_callback(); self.destroy()

class FileSelectionWindow(Toplevel):
    def __init__(self, parent, title, items, file_type):
        super().__init__(parent)
        self.parent = parent; self.file_type = file_type
        self.title(title); self.transient(parent); self.grab_set()
        
        listbox = Listbox(self, font=('Segoe UI', 10), width=80, height=10)
        for item in items: listbox.insert(tk.END, os.path.basename(item) if file_type == 'pdf' else item)
        listbox.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        
        def open_selected():
            selection_idx = listbox.curselection()
            if selection_idx:
                full_path = items[selection_idx[0]]
                self.parent.open_link_or_file(self.file_type, full_path)
                self.destroy()
        
        listbox.bind("<Double-1>", lambda e: open_selected())
        ttk.Button(self, text="Open Selected", command=open_selected).pack(pady=10)

class CategoryManager(Toplevel):
    def __init__(self, parent, data, save_callback):
        super().__init__(parent)
        self.title("Manage Categories"); self.geometry("350x400"); self.transient(parent); self.grab_set()
        self.data = data; self.save_callback = save_callback
        frame = ttk.Frame(self, padding="15"); frame.pack(fill=tk.BOTH, expand=True)
        self.listbox = Listbox(frame, font=('Segoe UI', 10)); self.listbox.pack(fill=tk.BOTH, expand=True)
        self.refresh_list()
        entry_frame = ttk.Frame(frame, padding=(0, 10, 0, 0)); entry_frame.pack(fill=tk.X)
        self.new_cat_var = tk.StringVar()
        ttk.Entry(entry_frame, textvariable=self.new_cat_var).pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(entry_frame, text="Add", command=self.add_category).pack(side=tk.LEFT, padx=(5,0))
        ttk.Button(frame, text="Remove Selected", command=self.remove_category).pack(fill=tk.X, pady=(5,0))
        ttk.Button(frame, text="Close", command=self.destroy).pack(fill=tk.X, pady=(5,0))

    def refresh_list(self):
        self.listbox.delete(0, tk.END)
        for cat in sorted(self.data['categories']): self.listbox.insert(tk.END, cat)

    def add_category(self):
        new_cat = self.new_cat_var.get().strip()
        if new_cat and new_cat not in self.data['categories']:
            self.data['categories'].append(new_cat); self.save_callback(); self.refresh_list(); self.new_cat_var.set("")
        elif not new_cat: messagebox.showwarning("Input Error", "Category name cannot be empty.", parent=self)
        else: messagebox.showwarning("Duplicate", "This category already exists.", parent=self)
    
    def remove_category(self):
        selection = self.listbox.curselection()
        if not selection: messagebox.showwarning("Selection Error", "Please select a category to remove.", parent=self); return
        selected_cat = self.listbox.get(selection[0])
        if messagebox.askyesno("Confirm Delete", f"Are you sure you want to remove '{selected_cat}'?"):
            self.data['categories'].remove(selected_cat); self.save_callback(); self.refresh_list()

if __name__ == "__main__":
    app = AdithaAlamaApp()
    app.mainloop()

